image:
  name: docker/compose:1.22.0
  entrypoint: ["/bin/sh", "-c"]

services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay2 #improve performance for dind
  DOCKER_HOST: "tcp://docker:2375" # enables docker-base-extended image to communicate with dind container
  APPLICATION_GROUP: "projectgroup"
  APPLICATION_NAME: "projectname"
  CI_REGISTRY_URI: "363414473458.dkr.ecr.ap-southeast-1.amazonaws.com"

.run_sh_depencencies_template:
  - &run_sh_dependencies
    "apk add --update bash git"

.aws_depencencies_template:
  - &awscli_dependencies
    "apk add --update --no-cache python3 && pip3 install --ignore-installed awscli==1.16.39"

.aws_ecr_login:
  - &aws_ecr_login
    "echo `aws ecr get-login --no-include-email --region ap-southeast-1` | sh"

.release-shared-before-script: &release-shared-before-script
  before_script:
    - eval $(ssh-agent -s)
    - echo "$CI_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - "mkdir -p ~/.ssh && chmod 700 ~/.ssh"
    - "export C_PROJECT_VERSION=$(git describe --tags --abbrev=0)"
    - "export ECR_TOKEN=$(aws ecr get-authorization-token --region ap-southeast-1 --output text --query 'authorizationData[].authorizationToken' | base64 --decode | cut -d: -f2)"

.release-shared-script: &release-shared-script
  script:
    - "rm -rf deploy && git clone -b master --single-branch git@gitlab.com:investexteam/ansible-deploy.git --depth 1 deploy"
    - 'cd deploy && find . -name "ec2.py" -type f -exec chmod +x {} \; && ansible-playbook -i inventories/${CI_ENVIRONMENT_NAME} --extra-vars "DOCKER_REGISTRY_URL=${CI_REGISTRY_URI} ECR_TOKEN=${ECR_TOKEN} APP_SERVER=partner APP_USER=backend CI_ENVIRONMENT_NAME=${CI_ENVIRONMENT_NAME} APPLICATION_NAME=${APPLICATION_NAME} APPLICATION_GROUP=${APPLICATION_GROUP} BUILD_VERSION=${C_PROJECT_VERSION} CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME}" --limit ${HOSTS_GROUP} sh-deploy.yml'

stages:
  - test
  - deploy_stage
  - deploy_prod

test-trunk:
  stage: test
  dependencies: []
  before_script:
    - *run_sh_dependencies
  script:
    - cp env.orig .env
    - ./run.sh stack test
    - ./run.sh test ci
  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+)%$/'
  artifacts:
    reports:
      junit:
        - ./tmp/test/unit/report.xml
        - ./tmp/test/functional/report.xml
    paths:
      - ./tmp
    expire_in: 1 week
  allow_failure: false
  except:
    - master
    - develop

test-release:
  stage: test
  dependencies: []
  before_script:
    - *run_sh_dependencies
    - *awscli_dependencies
    - *aws_ecr_login
  script:
    - cp env.orig .env
    - ./run.sh stack
    - ./run.sh test ci
    - ./run.sh docker buildrelease
    - ./run.sh docker tagrelease
    - ./run.sh docker pushrelease
    - docker logout
  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+)%$/'
  artifacts:
    reports:
      junit:
        - ./tmp/test/unit/report.xml
        - ./tmp/test/functional/report.xml
    paths:
      - ./tmp
    expire_in: 1 week
  only:
    - master
    - develop
  allow_failure: false

release-on-stage:
  stage: deploy_stage
  dependencies: []
  tags:
    - stage
    - bastion-stage
  variables:
    HOSTS_GROUP: "tag_Name_partner_stage"
  <<: *release-shared-before-script
  <<: *release-shared-script
  environment:
    name: STAGE
  only:
    - master
    - develop
  allow_failure: false
  when: manual

release-on-prod:
  stage: deploy_prod
  dependencies: []
  tags:
    - prod
    - bastion-prod
  variables:
    HOSTS_GROUP: "tag_Name_partner"
  <<: *release-shared-before-script
  <<: *release-shared-script
  environment:
    name: PROD
  only:
    - master
  allow_failure: false
  when: manual
